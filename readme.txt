	For this project, I divided the project into four parts. Starting off with the string input which I set as the variable “sentence”, I malloced the sentence so that it stores the length of the input string times the size of a character pointer. I then removed any character that isn’t in the alphabet using my function toString(). In this function we go through each character in our input sentence and use the built in function isalpha() which determines if the current character is in the alphabet. For this function, I replaced any character that wasn’t a letter into a space. The function returns the new sentence with only words and excess spaces.
	Afterwards, I use the function known as wordCount() which counts the total number of words contained in our sentence variable. For this function, I trace through the sentence variable and have a flag which tells me if I am on a space or character. If it is the first character of a word, I set the flag to 1 and increase the word count. This prevents miscounting since it will not count again until we meet the first character of the next word again.
	After counting the total number of words, We go into the makeArr() function where I make a double character pointer. This will allow me to store an array of strings. I malloc the double pointer by the number of words and the size of a character pointer. After some research, I concluded that using strtok() will allow me to split the string into individual words which I can store into the array. strtok() requires us to use delimiters. Since my sentence variable is now only words and spaces, I can set individual spaces as the delimiters and filter through the sentence in order to acquire the words. This results in our array of words in the sentence.
	The hardest part of the project would be the final function that I wrote, sort(). After some thought using pen and paper, I decided to use ascii values in order to sort my words. The main challenge with this was that uppercase letters have a lower value than lowercase letters. Thus, there were many constraints that were required in order to satisfy the conditions of this project. I made sure that any word we are comparing with prioritizes uppercase. So if the letter we are comparing is lower case and the word we are currently sorting through is lower case, we would call the helper method, swap() which switches the places of the two words. I made sure that the words would not swap if the word we are using to compare other words is going to be greater. However, when both words are either lowercase or uppercase, I can simply compare using operators and swap if I need to.
	After swapping, we get our array which is now sorted and all we need to do is traverse and print out our sorted array. This is done through the traverse() function. Error messages are printed for cases where the user either did not input a string with any tokens, put in an empty string, or inputted more than one argument. The code is then terminated after each error print.
